'fileTypes': [
  'enc'
]
'firstLineMatch': '^#!/.*\\b\\w*encore\\b'
'foldingStartMarker': '/\\*\\*|\\{\\s*$'
'foldingStopMarker': '\\*\\*/|^\\s*\\}'
'name': 'Encore'
'patterns': [
  {
    'include': '#interpolations'
  }
  {
    'include': '#code'
  }
]
'repository':
  'block-comments':
    'begin': '\\{\\-'
    'end': '\\-\\}'
    'name': 'comment.block.encore'
    'patterns': [
      {
        'include': '#block-comments'
      }
      {
        'match': '(?x)\n\t\t\t(?! /\\*)\n\t\t\t(?! \\*/)\n\t\t  '
      }
    ]
  'char-literal':
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.character.begin.encore'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.character.end.encore'
    'name': 'constant.character.literal.encore'
    'patterns': [
      {
        'match': '\\\\(?:[btnfr\\\\"\']|[0-7]{1,3}|u[0-9A-Fa-f]{4})'
        'name': 'constant.character.escape.encore'
      }
      {
        'match': '\\\\.'
        'name': 'invalid.illegal.unrecognized-character-escape.encore'
      }
      {
        'match': '[^\']{2,}'
        'name': 'invalid.illegal.character-literal-too-long'
      }
      {
        'match': '(?<!\')[^\']'
        'name': 'invalid.illegal.character-literal-too-long'
      }
    ]
#  'types':
#      'name': "encore.type"
#      'begin': '(?:class\\s|new\\s|:)\\s*[_$a-zA-Z][_$a-zA-Z0-9]*\\s*(<)'
#      'beginCaptures':
#        '1':
#          'name': 'bracket.type.encore'
#      'end': '>'
#      'patterns': [
##        {
##          'comments': '(<%|=:=|<:<|<%<|>:|<:)'
##          'match': '(<%|=:=|<:<|<%<|>:|<:|\\+|\\-)'
##          'name': 'meta.bounds.encore'
##        }
#        {
#          'match': '(\\w+)(?:\\s*,\\s*(\\w+))*'
#          'name': 'class'
#        }
#      ]
  'interpolation-expression' :
    'patterns': [
      {
        'name': 'source.embedded.encore'
        'begin': '(\\$\\{)'
        'patterns': [
          { 'include': '$self' }
        ]
        'end': '(\\})'
        'captures':
          '0':
            'name': 'punctuation.section.embedded.encore'
      }
      {
        'name': 'source.embedded.encore'
        'match': '(\\$)\\w+'
        'captures':
          '1':
            'name': 'punctuation.section.embedded.encore'
      }
    ]
  'interpolations':
    'patterns': [
      {
        'name': 'string.quoted.triple.encore'
        'begin': '\\w+"""'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.encore'
        'end': '"""(?!")'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.encore'
        'patterns': [
          { 'include': '#interpolation-expression' }
        ]
      }
      {
        'name': "string.quoted.double.encore"
        'begin': '\\w+"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.encore'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.encore'
        'patterns': [
          { 'include': '#interpolation-expression' }
        ]
      }
    ]
  'code':
    'patterns': [
      {
        'include': '#types'
      }
      {
        'include': '#storage-modifiers'
      }
      {
        'include': '#declarations'
      }
      {
        'include': '#inheritance'
      }
      {
        'include': '#imports'
      }
      {
        'include': '#comments'
      }
      {
        'include': '#block-comments'
      }
      {
        'include': '#strings'
      }
      {
        'include': '#initialization'
      }
#      {
#        'include': '#xml-literal'
#      }
      {
        'include': '#keywords'
      }
      {
        'include': '#constants'
      }
      {
        'include': '#encore-symbol'
      }
      {
        'include': '#char-literal'
      }
      {
        'include': '#empty-parentheses'
      }
      {
        'include': '#parameter-list'
      }
      {
        'include': '#qualifiedClassName'
      }
      {
        'include': '#meta-brackets'
      }
      {
        'include': '#meta-bounds'
      }
      {
        'include': '#meta-colons'
      }
    ]
  'comments':
    'patterns': [
      {
        'captures':
          '0':
            'name': 'punctuation.definition.comment.encore'
        'match': '\\{\\-\\-\\}'
        'name': 'comment.block.empty.encore'
      }
      {
        'begin': '^\\s*(/\\*\\*)'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.comment.encore'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.encore'
        'name': 'comment.block.documentation.encore'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'keyword.other.documentation.encoredoc.encore'
              '2':
                'name': 'variable.parameter.encore'
            'match': '(@param)\\s+(\\S+)'
          }
          {
            'captures':
              '1':
                'name': 'keyword.other.documentation.encoredoc.encore'
              '2':
                'name': 'entity.name.class'
              '3':
                'name': 'entity.name.description'
            'match': "(@(?:tparam|throws))\\s+(\\S+)\\s+(.*)"
          }
          {
            'match': '@(return|see|note|example|author|version|since|todo|deprecated|migration|define|inheritdoc|constructor)\\b'
            'name': 'keyword.other.documentation.encoredoc.encore'
          }
          {
            'begin': '(@usecase)\\b'
            'beginCaptures':
              '1':
                'name': 'keyword.other.documentation.encoredoc.encore.usecase'
            'end': '(?<=[\\n;])'
            'name': 'other.documentation.encoredoc.encore.usecase-block.embeded'
            'patterns': [
              { 'include': '#code' }
            ]
          }
          {
            'captures':
              '1':
                'name': 'punctuation.definition.documentation.link.encore'
              '2':
                'name': 'entity.other.documentation.link.encore'
              '3':
                'name': 'punctuation.definition.documentation.link.encore'
            'match': '(\\[\\[)([^\\]]+)(\\]\\])'
          }
          {
            'name': 'code-example.embedded'
            'begin': '(\\{\\{\\{)'
            'patterns': [
              {
                'name': 'margin'
                'match': '^\\s*\\*'
              }
              {'include': '#code'}
            ]
            'end': '(\\}\\}\\})'
            'captures':
              '1':
                'name': 'delimiters.encore'
          }
        ]
      }
      {
        'begin': '\\{-'
        'captures':
          '0':
            'name': 'punctuation.definition.comment.encore'
        'end': '-\\}'
        'name': 'comment.block.encore'
        'patterns': [
          {
            'captures':
              '0':
                'name': 'keyword.other.todo'
            'match': '(?:TODO|XXX):?'
          }
        ]
      }
      {
        'begin': '--'
        'captures':
          '0':
            'name': 'punctuation.definition.comment.encore'
        'end': '$'
        'name': 'comment.line.double-dash.encore'
#        'captures':
#          '1':
#            'name': 'comment.line.double-dash.encore'
#          '2':
#            'name': 'punctuation.definition.comment.encore'
#        'match': '\\s*((--).*$)'
        'patterns': [
          {
            'captures':
              '0':
                'name': 'keyword.other.todo'
            'match': '(?:TODO|XXX):?'
          }
        ]
      }
    ]
  'constants':
    'patterns': [
      {
        'match': '\\b(false|null|true|\\(\\)|Nothing)\\b'
        'name': 'constant.language.encore'
      }
      {
        'match': '\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)([LlFfUuDd]|UL|ul)?\\b'
        'name': 'constant.numeric.encore'
      }
      {
        'match': '\\b(this|super|self)\\b'
        'name': 'variable.language.encore'
      }
      {
        'match': '\\b(void|bool|int|real)\\b'
        'name': 'storage.type.primitive.encore'
      }
      {
        'match': '\\b(String|Maybe)\\b'
        'name': 'storage.type.encore'
      }
    ]
  'declarations':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'keyword.declaration.encore'
          '2':
            'name': 'entity.name.function.declaration'
        'match': '(?x)\n\t\t\t\t\t\t\\b(def)\\s+\n\t\t\t\t\t\t(`[^`]+`|[_$a-zA-Z][_$a-zA-Z0-9]*(?:_[^\\s])(?=[(\\t ])|[_$a-zA-Z][_$a-zA-Z0-9]*|[-?~><^+*%:!#|/@\\\\]+)'
      }
      {
        'captures':
          '1':
            'name': 'keyword.declaration.encore'
          '2':
            'name': 'entity.name.val.declaration.require'
          '3':
            'name': 'entity.name.function.declaration.require'
        'match': '\\b(require)\\s+(?:([_$a-zA-Z][_$a-zA-Z0-9]*)(?=\\s*:)|([_$a-zA-Z][_$a-zA-Z0-9]*)(?=\\s*\\())'
      }
      {
        'captures':
          '1':
            'name': 'keyword.declaration.encore'
          '2':
            'name': 'keyword.declaration.encore'
          '3':
            'name': 'entity.name.class.declaration'
        'match': '\\b(passive)?\\s+(class|trait|object)\\s+([^\\s\\{<]+)'
      }
      {
        'captures':
          '1':
            'name': 'keyword.declaration.encore'
          '2':
            'name': 'entity.name.type.declaration'
        'match': '\\b(type)\\s+(`[^`]+`|[_$a-zA-Z][_$a-zA-Z0-9]*(?:_[^\\s])(?=[\\t ])|[_$a-zA-Z][_$a-zA-Z0-9]*|[-?~><^+*%:!#|/@\\\\]+)'
      }
      {
        'captures':
          '1':
            'name': 'keyword.declaration.stable.encore'
          '2':
            'name': 'keyword.declaration.volatile.encore'
          '3':
            'name': 'entity.name.val.declaration'
        'match': '\\b(?:(val)|(var))\\s+(?:(`[^`]+`|[_$a-zA-Z][_$a-zA-Z0-9]*(?:_[^\\s])(?=[\\t ])|[_$a-zA-Z][_$a-zA-Z0-9]*|[-?~><^+*%:!#|/@\\\\]+)|(?=\\())'
      }
      {
        'captures':
          '1':
            'name': 'keyword.other.scoping.encore'
          '2':
            'name': 'entity.name.bundle.encore'
          '3':
            'name': 'keyword.other.scoping.encore'
        'match': '\\b(bundle)\\s+([\\w\\.]+)\\s+(where)\\b'
        'name': 'meta.bundle.encore'
      }
    ]
  'empty-parentheses':
    'captures':
      '1':
        'name': 'meta.bracket.encore'
    'match': '(\\(\\))'
    'name': 'meta.parentheses.encore'
  'imports':
    'begin': '\\b(import)\\s+'
    'beginCaptures':
      '1':
        'name': 'keyword.other.import.encore'
    'end': '([\\n;]+)'
    'name': 'meta.import.encore'
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'match': '([^\\s{;.]+)\\s*\\.\\s*'
        'name': 'variable.bundle.encore'
      }
      {
        'match': '([^\\s{;.]+)\\s*[._]'
        'name': 'variable.import.encore'
      }
      {
        'begin': '{'
        'beginCaptures':
          '0':
            'name': 'meta.bracket.encore'
        'end': '}'
        'endCaptures':
          '0':
            'name': 'meta.bracket.encore'
        'name': 'meta.import.selector.encore'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'variable.import.renamed-from.encore'
              '2':
                'name': 'keyword.other.arrow.encore'
              '3':
                'name': 'variable.import.renamed-to.encore'
            'match': '(?x) \\s*\n\t\t\t\t([^\\s.,}]+) \\s*\n\t\t\t\t(=>) \\s*\n\t\t\t\t([^\\s.,}]+) \\s*\n\t\t\t  '
          }
          {
            'match': '([^\\s.,}]+)'
            'name': 'variable.import.encore'
          }
        ]
      }
    ]
  'inheritance':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'keyword.declaration.encore'
          '2':
            'name': 'entity.other.inherited-class.encore'
        'match': 'class .*(?:<.*>)?\\s+(:)\\s+([^\\s\\{\\(\\[\\]]+)'
      }
    ]
  'initialization':
    'captures':
      '1':
        'name': 'keyword.declaration.encore'
      '2':
        'name': 'entity.name.class'
    'match': '\\b(new)\\s+([^\\s\\{\\(\\[<]+)'
  'keywords':
    'patterns': [
      {
        'match': '\\b(return|throw)\\b'
        'name': 'keyword.control.flow.jump.encore'
      }
      {
        'match': '\\b(classOf|isInstanceOf|asInstanceOf)\\b'
        'name': 'support.function.type-of.encore'
      }
      {
        'match': '\\b(else|if|then|while|repeat|yield|match|with|when)\\b'
        'name': 'keyword.control.flow.encore'
      }
      {
        'match': '\\b(catch|finally|try)\\b'
        'name': 'keyword.control.exception.encore'
      }
      {
        'match': '\\b(let|in)\\b'
        'name': 'keyword.declaration.encore'
      }
      {
        'match': '(<-|←|->|→|=>|⇒|\\?|\\:+|@|\\|)+'
        'name': 'keyword.operator.encore'
      }
      {
        'match': '(==?|!=|<=|>=|<>|<|>)'
        'name': 'keyword.operator.comparison.encore'
      }
      {
        'match': '(\\-|\\+|\\*|/(?![/*])|%|~)'
        'name': 'keyword.operator.arithmetic.encore'
      }
      {
        'match': '(not|and|or)'
        'name': 'keyword.operator.logical.encore'
      }
    ]
  'meta-brackets':
    'comment': 'For themes: Brackets look nice when colored.'
    'patterns': [
      {
        'match': '{|}|\\(|\\)'
        'name': 'meta.bracket.encore'
      }
    ]
  'meta-colons':
    'comment': 'For themes: Matching type colons'
    'patterns': [
      {
        'match': '(?<!:):(?!:)'
        'name': 'meta.colon.encore'
      }
    ]
  'parameter-list':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'variable.parameter.encore'
          '2':
            'name': 'meta.colon.encore'
        'comment': 'We do not match param names that start with a Capitol letter'
        'match': '(?<=[^\\._$a-zA-Z0-9])(`[^`]+`|[_$a-z][_$a-zA-Z0-9]*(?:_[^\\s])(?=[\\t ])|[_$a-z][_$a-zA-Z0-9]*|[-?~><^+*%:!#|/@\\\\]+)\\s*(:)\\s+'
      }
    ]
  'qualifiedClassName':
    'captures':
      '1':
        'name': 'entity.name.class'
    'match': '(\\b([A-Z][\\w]*))'
  'encore-symbol':
    'match': '\'\\w+(?=[^\'\\w])'
    'name': 'entity.name.symbol'
  'storage-modifiers':
    'patterns': [
      {
        'match': '\\b(private\\[\\S+\\]|protected\\[\\S+\\]|private|protected)\\b'
        'name': 'storage.modifier.access'
      }
      {
        'match': '\\b(synchronized|@volatile|abstract|final|lazy|sealed|implicit|override|@transient|@native)\\b'
        'name': 'storage.modifier.other'
      }
    ]
  'strings':
    'patterns': [
      {
        'begin': '"""'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.encore'
        'end': '"""(?!")'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.encore'
        'name': 'string.quoted.triple.encore'
        'patterns': [
          {
            'match': '\\\\\\\\|\\\\u[0-9A-Fa-f]{4}'
            'name': 'constant.character.escape.encore'
          }
        ]
      }
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.encore'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.encore'
        'name': 'string.quoted.double.encore'
        'patterns': [
          {
            'match': '\\\\(?:[btnfr\\\\"\']|[0-7]{1,3}|u[0-9A-Fa-f]{4})'
            'name': 'constant.character.escape.encore'
          }
          {
            'match': '\\\\.'
            'name': 'invalid.illegal.unrecognized-string-escape.encore'
          }
        ]
      }
    ]
#  'xml-doublequotedString':
#    'begin': '"'
#    'beginCaptures':
#      '0':
#        'name': 'punctuation.definition.string.begin.xml'
#    'end': '"'
#    'endCaptures':
#      '0':
#        'name': 'punctuation.definition.string.end.xml'
#    'name': 'string.quoted.double.xml'
#    'patterns': [
#      {
#        'include': '#xml-entity'
#      }
#    ]
#  'xml-embedded-content':
#    'patterns': [
#      {
#        'name': 'meta.source.embedded.encore'
#        'begin': '{'
#        'patterns': [
#          {
#            'include': '#code'
#          }
#        ]
#        'end': '}'
#        'captures':
#          '0':
#            'name': 'meta.bracket.encore'
#      }
#      {
#        'captures':
#          '1':
#            'name': 'entity.other.attribute-name.namespace.xml'
#          '2':
#            'name': 'entity.other.attribute-name.xml'
#          '3':
#            'name': 'punctuation.separator.namespace.xml'
#          '4':
#            'name': 'entity.other.attribute-name.localname.xml'
#        'match': ' (?:([-_a-zA-Z0-9]+)((:)))?([_a-zA-Z-]+)='
#      }
#      {
#        'include': '#xml-doublequotedString'
#      }
#      {
#        'include': '#xml-singlequotedString'
#      }
#    ]
#  'xml-entity':
#    'captures':
#      '1':
#        'name': 'punctuation.definition.constant.xml'
#      '3':
#        'name': 'punctuation.definition.constant.xml'
#    'match': '(&)([:a-zA-Z_][:a-zA-Z0-9_.-]*|#[0-9]+|#x[0-9a-fA-F]+)(;)'
#    'name': 'constant.character.entity.xml'
#  'xml-literal':
#    'patterns': [
#      {
#        'begin': '(<)((?:([_a-zA-Z0-9][_a-zA-Z0-9]*)((:)))?([_a-zA-Z0-9][-_a-zA-Z0-9:]*))(?=(\\s[^>]*)?></\\2>)'
#        'beginCaptures':
#          '1':
#            'name': 'punctuation.definition.tag.xml'
#          '3':
#            'name': 'entity.name.tag.namespace.xml'
#          '4':
#            'name': 'entity.name.tag.xml'
#          '5':
#            'name': 'punctuation.separator.namespace.xml'
#          '6':
#            'name': 'entity.name.tag.localname.xml'
#        'comment': 'We do not allow a tag name to start with a - since this would\n\t\t\t\t               likely conflict with the <- operator. This is not very common\n\t\t\t\t               for tag names anyway.  Also code such as -- if (val <val2 || val> val3)\n\t\t\t\t               will falsly be recognized as an xml tag.  The solution is to put a\n\t\t\t\t               space on either side of the comparison operator'
#        'end': '(>(<))/(?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]*[_a-zA-Z0-9])(>)'
#        'endCaptures':
#          '1':
#            'name': 'punctuation.definition.tag.xml'
#          '2':
#            'name': 'meta.scope.between-tag-pair.xml'
#          '3':
#            'name': 'entity.name.tag.namespace.xml'
#          '4':
#            'name': 'entity.name.tag.xml'
#          '5':
#            'name': 'punctuation.separator.namespace.xml'
#          '6':
#            'name': 'entity.name.tag.localname.xml'
#          '7':
#            'name': 'punctuation.definition.tag.xml'
#        'name': 'meta.tag.no-content.xml'
#        'patterns': [
#          {
#            'include': '#xml-embedded-content'
#          }
#        ]
#      }
#      {
#        'begin': '(</?)(?:([_a-zA-Z0-9][-_a-zA-Z0-9]*)((:)))?([_a-zA-Z0-9][-_a-zA-Z0-9:]*)(?=[^>]*?>)'
#        'captures':
#          '1':
#            'name': 'punctuation.definition.tag.xml'
#          '2':
#            'name': 'entity.name.tag.namespace.xml'
#          '3':
#            'name': 'entity.name.tag.xml'
#          '4':
#            'name': 'punctuation.separator.namespace.xml'
#          '5':
#            'name': 'entity.name.tag.localname.xml'
#        'end': '(/?>)'
#        'name': 'meta.tag.xml'
#        'patterns': [
#          {
#            'include': '#xml-embedded-content'
#          }
#        ]
#      }
#      {
#        'include': '#xml-entity'
#      }
#    ]
#  'xml-singlequotedString':
#    'begin': '\''
#    'beginCaptures':
#      '0':
#        'name': 'punctuation.definition.string.begin.xml'
#    'end': '\''
#    'endCaptures':
#      '0':
#        'name': 'punctuation.definition.string.end.xml'
#    'name': 'string.quoted.single.xml'
#    'patterns': [
#      {
#        'include': '#xml-entity'
#      }
#    ]
'scopeName': 'source.encore'
